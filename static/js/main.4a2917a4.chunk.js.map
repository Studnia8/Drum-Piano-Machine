{"version":3,"sources":["MyDM.js","serviceWorker.js","index.js"],"names":["drum","keyCode","keyTrigger","id","url","piano","activeSt","backgroundColor","boxShadow","marginTop","height","inactiveSt","Drum","props","state","padState","playSound","bind","swapPadState","keyPress","document","addEventListener","this","removeEventListener","e","play","getElementById","currentTime","setTimeout","updDispl","padID","replace","onoff","setState","margin","onClick","className","style","src","sound","React","Component","DrumBox","drumBox","currentDrumBox","map","drumObj","i","drumBoxArr","MyDrumApp","displayValue","String","fromCharCode","currentDrumBoxID","volSlidVal","displayName","onoffCon","volValue","selBox","clearDispl","name","target","value","Math","round","powerSlider","float","bankSlider","slice","call","getElementsByClassName","forEach","volume","soundVol","type","min","max","step","onChange","title","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4a2917a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./MyDM.scss\";\r\n\r\n// pad content\r\nconst drum = [{\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Hi Hat open/close',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n  }, {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Hi Hat closed',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n  }, {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Snare',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\r\n  }, {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Tom',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\r\n  }, {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: 'Bass',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n  }];\r\n\r\n  const piano = [{\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Heater 1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n  }, {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Heater 2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n  }, {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Chord 1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\r\n  }, {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Chord 2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\r\n  }, {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: 'Chord 3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\r\n  }];\r\n  // pads state\r\n  const activeSt={\r\n    backgroundColor:\"red\",\r\n    boxShadow:\"0 0px black\",\r\n    marginTop:13,\r\n    height: 77\r\n  };\r\n\r\n  const inactiveSt={\r\n    backgroundColor: \"blue\",\r\n    boxShadow:\"3px 3px black\",\r\n    marginTop: 10\r\n  };\r\n// declare drumpads\r\n  class Drum extends React.Component{\r\n      constructor(props){\r\n          super(props);\r\n          this.state={\r\n            padState: inactiveSt\r\n          }\r\n          //bindings\r\n          this.playSound = this.playSound.bind(this);\r\n          this.swapPadState = this.swapPadState.bind(this);\r\n          this.keyPress = this.keyPress.bind(this);\r\n      }\r\n      // listerners\r\n      componentDidMount(){\r\n        document.addEventListener('keydown',this.keyPress);\r\n      }\r\n      componentWillUnmount(){\r\n        document.removeEventListener('keydown',this.keyPress);\r\n      }\r\n      // methods\r\n      playSound(e){\r\n        const play = document.getElementById(this.props.keyTrigger);\r\n        play.currentTime = 0;\r\n        play.play();\r\n        this.swapPadState();\r\n        setTimeout(()=>this.swapPadState(),100);\r\n        this.props.updDispl(this.props.padID.replace(/-/g,\"\"));\r\n      }\r\n      swapPadState(){\r\n        if(this.props.onoff){\r\n            this.state.padState.backgroundColor === \"red\"?\r\n            this.setState({\r\n                padState: inactiveSt\r\n            }):\r\n            this.setState({\r\n                padState: activeSt\r\n            });\r\n        } else{\r\n            this.state.padState.margin === 13 ?\r\n            this.setState({\r\n                padState:inactiveSt\r\n            }):\r\n            this.setState({\r\n                padState: {\r\n                    backgroundColor: \"blue\",\r\n                    boxShadow:\"3px 3px black\",\r\n                    marginTop: 10,\r\n                    height: 80\r\n                }\r\n            });\r\n        }\r\n      }\r\n      keyPress(e){\r\n        if(e.keyCode===this.props.keyCode){\r\n            this.playSound();\r\n        }\r\n        else{\r\n\r\n        }\r\n      };\r\n      // render \r\n      render(){\r\n          return(\r\n              <div id={this.props.padID}\r\n              onClick={this.playSound}\r\n              className=\"drum-pad\" \r\n              style={this.state.padState}>\r\n                <audio className='sound' id={this.props.keyTrigger} src={this.props.sound}></audio>\r\n                {this.props.keyTrigger}\r\n              </div>\r\n          )\r\n      }\r\n  }\r\n// pad box\r\n  class DrumBox extends React.Component{\r\n      constructor (props){\r\n          super(props)\r\n      }\r\n      // render\r\n      render(){\r\n        let drumBox;\r\n        this.props.onoff?\r\n            drumBox = this.props.currentDrumBox.map((drumObj, i, drumBoxArr)=>{\r\n              return(\r\n                <Drum\r\n                padID={drumBoxArr[i].id} \r\n\t  \t\t\t\t\t  sound={drumBoxArr[i].url}\r\n\t\t  \t  \t\t\tkeyTrigger={drumBoxArr[i].keyTrigger}\r\n\t\t\t  \t  \t\tkeyCode={drumBoxArr[i].keyCode} \r\n\t\t\t\t  \t  \tupdDispl={this.props.updDispl} \r\n\t\t\t\t\t  \t  onoff={this.props.onoff}/>\r\n              )\r\n            }):\r\n            drumBox = this.props.currentDrumBox.map((drumObj, i, drumBoxArr)=>{\r\n              return(\r\n                <Drum\r\n                padID={drumBoxArr[i].id} \r\n\t  \t\t\t\t\t  sound=\"#\"\r\n\t\t  \t  \t\t\tkeyTrigger={drumBoxArr[i].keyTrigger}\r\n\t\t\t  \t  \t\tkeyCode={drumBoxArr[i].keyCode} \r\n\t\t\t\t  \t  \tupdDispl={this.props.updDispl} \r\n\t\t\t\t\t  \t  onoff={this.props.onoff}/>\r\n              )\r\n            });\r\n            return(\r\n              <div className=\"pad-bank\" >\r\n                {drumBox}\r\n              </div>\r\n            )\r\n      }\r\n  }\r\n// main app\r\nclass MyDrumApp extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={\r\n      onoff: true,\r\n      displayValue:String.fromCharCode(160),\r\n      currentDrumBox: drum,\r\n      currentDrumBoxID: \"Drum Kit\",\r\n      volSlidVal: 0.2\r\n    }\r\n    // binding\r\n    this.displayName = this.displayName.bind(this);\r\n    this.onoffCon = this.onoffCon.bind(this);\r\n    this.volValue = this.volValue.bind(this);\r\n    this.selBox = this.selBox.bind(this);\r\n    this.clearDispl = this.clearDispl.bind(this);\r\n  }\r\n  // methods\r\n  displayName(name){\r\n    if(this.state.onoff){\r\n      this.setState({\r\n        displayValue: name \r\n      });\r\n      setTimeout(() => this.clearDispl(), 1500);\r\n    }\r\n  }\r\n  onoffCon(){\r\n    this.setState({\r\n      onoff:!this.state.onoff,\r\n      displayValue:String.fromCharCode(160)\r\n    })\r\n  }\r\n  volValue(e){\r\n    if(this.state.onoff){\r\n      this.setState({\r\n        volSlidVal: e.target.value,\r\n        displayValue: \"Volume: \" + Math.round(e.target.value * 100)\r\n      });\r\n      setTimeout(() => this.clearDispl(), 1500);\r\n    }\r\n  }\r\n  selBox(){\r\n    if(this.state.onoff){\r\n      this.state.currentDrumBoxID === \"Drum Kit\"?\r\n        this.setState({\r\n          currentDrumBox: piano,\r\n          displayValue: \"Piano Kit\",\r\n          currentDrumBoxID: \"Piano Kit\"\r\n        }):\r\n        this.setState({\r\n          currentDrumBox: drum,\r\n          displayValue: \"Drum Kit\",\r\n          currentDrumBoxID: \"Drum Kit\"\r\n        });\r\n        setTimeout(() => this.clearDispl(), 1500);\r\n    }\r\n  }\r\n  clearDispl(){\r\n    this.setState({\r\n      displayValue:String.fromCharCode(160)\r\n    })\r\n  }\r\n  // render\r\n  render(){\r\n    const powerSlider = this.state.onoff ? {\r\n      float: 'right'\r\n    } : {\r\n      float: 'left'\r\n    };\r\n    const bankSlider = this.state.currentDrumBox === drum ? {\r\n      float: 'right'\r\n    } : {\r\n      float: 'left'\r\n    }; \r\n    {\r\n      const sounds = [].slice.call(document.getElementsByClassName('sound'));\r\n      sounds.forEach(sound => {\r\n        sound.volume = this.state.volSlidVal\r\n      });\r\n    }\r\n    return(\r\n      <div>\r\n      <div id=\"drum-machine\" className=\"inner-container\">\r\n        <DrumBox \r\n        onoff={this.state.onoff}\r\n        updDispl={this.displayName}\r\n        soundVol={this.state.volSlidVal}\r\n        currentDrumBox={this.state.currentDrumBox}\r\n        />\r\n        <div className=\"logo\">\r\n          <div className=\"inner-logo \">\r\n            {'Made by: MS'}\r\n          </div>\r\n        </div>\r\n      \r\n        <div className=\"controls-container\">\r\n\t\t\t\t  <div className=\"control\">\r\n\t\t\t\t    <p>On/Off</p>\r\n\t\t\t\t\t  <div onClick={this.onoffCon} className=\"select\">\r\n\t\t\t\t\t  \t<div style={powerSlider} className=\"inner\" />\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t  </div>\r\n\t\t\t\t  <p id=\"display\">\r\n\t\t\t\t  \t{this.state.displayValue}\r\n\t\t\t\t  </p>\r\n\t\t\t\t  <div className=\"volume-slider\">\r\n\t\t\t\t\t  <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={this.state.volSlidVal} onChange={this.volValue} />\r\n\t\t\t\t  </div>\r\n\t\t\t\t  <div className=\"control\">\r\n\t\t\t\t\t  <p>Change kit:</p>\r\n\t\t\t\t\t  <div onClick={this.selBox} className=\"select\">\r\n\t\t\t\t\t  \t<div style={bankSlider} className=\"inner\" />\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t  </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"madeby\">Made by <a className=\"madeLink\" title=\"Go to Github!\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/Studnia8\">Studnia8</a></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyDrumApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyDrumApp from './MyDM';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MyDrumApp />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}